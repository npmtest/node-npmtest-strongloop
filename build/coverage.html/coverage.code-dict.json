{"/home/travis/build/npmtest/node-npmtest-strongloop/test.js":"/* istanbul instrument in package npmtest_strongloop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-strongloop/lib.npmtest_strongloop.js":"/* istanbul instrument in package npmtest_strongloop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_strongloop = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_strongloop = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-strongloop/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-strongloop && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_strongloop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_strongloop\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_strongloop.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_strongloop.rollup.js'] =\n            local.assetsDict['/assets.npmtest_strongloop.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_strongloop.__dirname +\n                    '/lib.npmtest_strongloop.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-strongloop/node_modules/strongloop/lib/command.js":"// Copyright IBM Corp. 2014,2016. All Rights Reserved.\n// Node module: strongloop\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\nmodule.exports = function Command(command, npmModule) {\n  return function(argv, _options, loader) {\n    var options = {\n      env: process.env,\n      stdio: 'inherit'\n    };\n\n    var resolvedCommand;\n    try {\n      resolvedCommand = require.resolve(npmModule + '/' + command);\n    } catch (er) {\n      var msg = 'Error running %s (%s), it may need installation,' +\n        ' try `npm update -g strongloop`.';\n      loader.error(msg, command, er.message);\n    }\n\n    // Transmit full original command name to children\n    options.env.CMD = 'slc ' + process.env.SLC_COMMAND;\n\n    // Build a new `argv` with full path for command\n    // The first argv value should be the path to the node executable\n    process.argv = [process.argv[0], resolvedCommand].concat(argv);\n    require('module')._load(resolvedCommand, null, true);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-strongloop/node_modules/strongloop/lib/loader.js":"// Copyright IBM Corp. 2013,2015. All Rights Reserved.\n// Node module: strongloop\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\n//\n// # CommandLoader\n//\n// The CommandLoader is responsible for loading and validating Command modules\n// present at a configurable location in the filesystem.\n//\nvar assert = require('assert');\nvar debug = require('debug')('slc');\nvar EventEmitter = require('events').EventEmitter;\nvar fs = require('fs');\nvar path = require('path');\nvar optimist = require('optimist');\nvar util = require('util');\n\n//\n// ## CommandLoader `CommandLoader(obj)`\n//\n// Creates a new instance of CommandLoader with the following options:\n//  * root - The location of Command modules in the filesystem, represented as a\n//    String. Defaults to a sibling 'commands' folder.\n//  * strict - If true, CommandLoader will emit 'error' events if its run with a\n//    primary argument that doesn't exist as a command. Otherwise, that argument\n//    will be included in the fallback command's arguments. Defaults to `true`.\n//  * usage - If `--help` or `-h` are passed as options, this command will be\n//    used to generate a usage summary. Defaults to 'help'.\n//  * fallback - If an unknown command is specified while running, this command\n//    is used instead. Defaults to the same as `usage`.\n//  * default - The command to run when no command is specified in argv.\n//    Defaults to the same as `usage`.\n//  * manuals - If set, this location will be used as a repository of named\n//    manual files by loadManual()\n//\n// Commands are modules required from `root`. They must have a .run function,\n// and a .usage string. Or, if module exports justa a function, that function\n// will be used as the .run function, and if .usage is undefined it will be\n// loaded by loadManual().\nfunction CommandLoader(obj) {\n  if (!(this instanceof CommandLoader)) {\n    return new CommandLoader(obj);\n  }\n\n  obj = obj || {};\n\n  this.root = obj.root || path.resolve(__dirname, 'commands');\n  this.strict = true;\n  this.usage = obj.usage || 'help';\n  this.fallback = obj.fallback || this.usage;\n  this.default = obj.default || this.usage;\n  this.manuals = obj.manuals || null;\n}\nutil.inherits(CommandLoader, EventEmitter);\nCommandLoader.createLoader = CommandLoader;\n\n//\n// ## isCommand `CommandLoader.isCommand(module)`\n//\n// Returns `true` if **module** is a valid Command, `false` otherwise.\n//\nCommandLoader.isCommand = isCommand;\nfunction isCommand(module) {\n  return !!module && typeof module.run === 'function';\n}\n\n//\n// ## parse `parse(argv, [options])`\n//\n// Parses **argv** as an Array of Strings, whether command line arguments or\n// similar. If **options** is specified, is it used to configure `optimist`\n// accordingly.\n//\n// Returns an Object with `-f` and `--foo` arguments as members and extraneous\n// arguments as members of the `_` Array.\n//\nCommandLoader.prototype.parse = parse;\nfunction parse(argv, options) {\n  return optimist(argv).options(options || {}).argv;\n}\n\n//\n// ## run `run([argv])`\n//\n// Synchronously parses **argv**, or `process.argv` otherwise. If a command is\n// present, that command is run. If no command is run, the configured `fallback`\n// command is run instead.\n//\nCommandLoader.prototype.run = run;\nfunction run(argv) {\n  var self = this;\n  var options = self.parse(argv || (argv = process.argv.slice(2)));\n  var command = null;\n\n  debug('slc.run:', 'argv', argv, 'options', options);\n\n  if (argv[0] === '-h' || argv[0] === '--help') {\n    return self.printUsage('slc');\n  } else if (argv[0] === '-v' || argv[0] === '--version' ||\n             argv[0] === 'version') { // For backards compatibility with docs\n    return require('./version')();\n  } else if (!options._.length) {\n    return self.printUsage('slc');\n  } else {\n    // Otherwise, if we've provided our own command, use that.\n    command = self.getRun(options._[0]);\n\n    // Build the new, command-local `argv` and `options`.\n    if (command) {\n      argv = argv.slice(argv.indexOf(options._[0]) + 1);\n      options = self.parse(argv);\n    } else if (self.strict) {\n      return self.error(\n        '\"%s\" is not an slc command. See `slc --help` for more information.',\n        options._[0]);\n    } else {\n      command = self.getRun(self.fallback);\n    }\n  }\n\n  assert(command);\n\n  process.env.SLC_COMMAND = command.command;\n  command(argv, options, self);\n\n  return self;\n}\n\n//\n// ## loadCommand `loadCommand(name)`\n//\n// Synchronously loads the Command module for **name**.\n//\n// Returns either a Command or null if the command could not be loaded.\n//\nCommandLoader.prototype.loadCommand = loadCommand;\nfunction loadCommand(name) {\n  var self = this;\n  var module = null;\n  // Try to support slc loopback:model\n  var index = name.indexOf(':');\n  if (index !== -1) {\n    name = name.substring(0, index);\n  }\n  var command = path.resolve(this.root, String(name));\n\n  try {\n    module = require(command);\n  } catch (e) {\n    debug('require %s failed with', command, e);\n\n    if (e && e.code === 'MODULE_NOT_FOUND' &&\n        e.message.indexOf(command) !== -1) {\n      // In this case, the command was not found. Without the indexOf(), if the\n      // command implementation had a buggy require of a module that couldn't be\n      // found, it would be handled as if the command wasn't present.\n      return null;\n    }\n\n    return self.error('Error loading module \"%s\":\\n', name, e);\n  }\n\n  if (typeof module === 'function' || typeof module.run === 'function') {\n    module = {\n      name: name,\n      run: module.run || module,\n      usage: self.loadManual(name)\n    };\n  }\n\n  if (!CommandLoader.isCommand(module)) {\n    return null;\n  }\n\n  return module;\n}\n\n//\n// ## getUsage `getUsage(name)`\n//\n// Returns the usage information for the **name** Command, represented as a\n// String. If **name** cannot be found, returns `null`.\n//\nCommandLoader.prototype.getUsage = getUsage;\nfunction getUsage(name) {\n  var self = this;\n  var module = self.loadCommand(name);\n\n  return module ? module.usage : null;\n}\n\nCommandLoader.prototype.printUsage = printUsage;\nfunction printUsage(name) {\n  console.log(this.loadManual(name));\n}\n\n//\n// ## getRun `getRun(name)`\n//\n// Returns the run Function for the **name** Command. If **name** cannot be\n// found, returns `null`.\n//\nCommandLoader.prototype.getRun = getRun;\nfunction getRun(name) {\n  var self = this;\n  var module = self.loadCommand(name);\n\n  debug('loadCommand', 'name', name,\n    'run?', module && typeof module.run,\n    'usage?', module && typeof module.usage);\n\n  if (module && module.run) {\n    module.run.command = module.name;\n  }\n\n  return module ? module.run : null;\n}\n\n//\n// ## error `error(format, ...)`\n//\n// Emits a new error event for user handling, arguments are formatted\n// with `util.format()`.\n//\nCommandLoader.prototype.error = error;\nfunction error() {\n  var self = this;\n  var message = util.format.apply(null, arguments);\n\n  self.emit('error', new Error(message));\n\n  return self;\n}\n\n//\n// ## loadManual `loadManual(name)`\n//\n// Synchronously loads the manual file for **name** if it exists within a\n// configured `loader.manuals` folder.\n//\n// Returns the file's contents if it exists, `null` otherwise.\n//\n// Files are required to be in UTF-8 format.\n//\nCommandLoader.prototype.loadManual = loadManual;\nfunction loadManual(name) {\n  var self = this;\n\n  assert(self.manuals);\n\n  function filename(ext) {\n    return path.resolve(self.manuals, name + ext);\n  }\n\n  // Return txt files, if we have them, otherwise man pages (which require\n  // massaging on windows).\n  try {\n    return fs.readFileSync(filename('.txt'), 'utf8');\n  } catch (er) {\n    /* eslint no-empty:0 */\n  }\n\n  try {\n    var usage = fs.readFileSync(filename(''), 'utf8');\n\n    if (process.platform === 'win32') {\n      // Any char, followed by a backspace.\n      var boldPair = new RegExp('.\\b', 'g');\n      var clean = usage.replace(boldPair, '');\n      usage = clean;\n    }\n    return usage;\n  } catch (er) {\n    /* eslint no-empty:0 */\n  }\n\n  return null;\n}\n\nmodule.exports = CommandLoader;\n","/home/travis/build/npmtest/node-npmtest-strongloop/node_modules/strongloop/lib/shim.js":"// Copyright IBM Corp. 2013,2014. All Rights Reserved.\n// Node module: strongloop\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\nfunction shim(name, oldFn) {\n  return function(argv, options, loader) {\n    var program = require('commander');\n    oldFn(program, function(err) {\n      if (err) {\n        loader.error(err);\n      }\n    });\n    program.parse(['magically eaten', 'me, too', name].concat(argv));\n  };\n}\n\nmodule.exports = shim;\n","/home/travis/build/npmtest/node-npmtest-strongloop/node_modules/strongloop/lib/version.js":"// Copyright IBM Corp. 2013,2015. All Rights Reserved.\n// Node module: strongloop\n// This file is licensed under the Artistic License 2.0.\n// License text available at https://opensource.org/licenses/Artistic-2.0\n\nvar path = require('path');\nvar util = require('util');\n\nfunction formatReport(info, prefix) {\n  var result = '';\n  var names = Object.keys(info);\n  for (var i = 0; i < names.length; i++) {\n    var childPrefix = prefix;\n    result += prefix;\n    if (i === names.length - 1) {\n      result += '└─';\n      childPrefix += '  ';\n    } else {\n      result += '├─';\n      childPrefix += '│ ';\n    }\n\n    var objInfo = info[names[i]];\n    if (Object.keys(objInfo.dependencies).length > 0) {\n      result += '┬';\n    } else {\n      result += '─';\n    }\n    if (objInfo.gitCommit) {\n      result += util.format(' %s@%s (%s)\\n', names[i], objInfo.version,\n                            objInfo.gitCommit.slice(0, 7));\n    } else {\n      result += util.format(' %s@%s\\n', names[i], objInfo.version);\n    }\n    result += formatReport(objInfo.dependencies, childPrefix);\n  }\n  return result;\n}\n\n// The dependencies we are primarily interested in reporting about are\n// those that the slc commands directly depend on. In addition, report\n// the version of strong-agent.\nvar REPORT_DEPENDENCIES = [\n  'strong-arc',\n  'strong-build',\n  'strong-deploy',\n  'strong-mesh-models',\n  'strong-pm',\n  'strong-registry',\n  'strong-start',\n  'strong-supervisor',\n  'generator-loopback',\n  'node-inspector',\n  'nodefly-register',\n];\n\nmodule.exports = function() {\n  var result = {};\n  REPORT_DEPENDENCIES.forEach(function(name) {\n    try {\n      var pkg = require(path.join(name, 'package.json'));\n      result[name] = {\n        version: pkg.version, dependencies: {}, gitCommit: pkg.gitHead\n      };\n    } catch (er) {\n      console.error(\n        'Dependency %s not found, try `npm install -g strongloop`.',\n        name\n      );\n    }\n  });\n\n  try {\n    var agent = require('strong-supervisor').__module.\n        require(path.join('strong-agent', 'package.json'));\n    result['strong-supervisor'].dependencies['strong-agent'] = {\n      version: agent.version,\n      dependencies: {},\n      gitCommit: agent.gitHead,\n    };\n  } catch (er) {\n    console.error(\n      'Dependency %s not found, try `npm install -g strongloop`.',\n      'strong-agent'\n    );\n  }\n\n  var PACKAGE = require('../package.json');\n  var peerDeps = PACKAGE.peerDependencies || [];\n  Object.keys(peerDeps).forEach(function(name) {\n    try {\n      var pkg = require(path.join(name, 'package.json'));\n      result[name] = {\n        version: pkg.version, dependencies: {}, gitCommit: pkg.gitHead\n      };\n    } catch (er) {\n      console.error(\n        'Peer dependency %s not found, try `npm install -g %s`.',\n        name, name\n      );\n    }\n  });\n\n  console.log('strongloop v%s (node %s)', PACKAGE.version, process.version);\n  console.log(formatReport(result, ''));\n};\n\n// For unit test\nmodule.exports.__REPORT_DEPENDENCIES = REPORT_DEPENDENCIES;\n"}